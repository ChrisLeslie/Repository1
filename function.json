
 Blog


Getting Started with Azure Static Web Apps
This entry was posted in Azure and tagged angulargatsbyhugomicrosoft teamsreactstatic web appssveltevue on May 18, 2021 by Dan Wahlin
     

What does it take to deploy a modern JavaScript web app? Your initial response might be, “Copy the files up to the server – how hard could it be?”.

The reality is that deploying modern JavaScript apps is a bit more complicated than simply copying files up to a server. For example, let’s say that you have a Single Page Application (a static web application) built with React, Vue, Angular, or another technology that hits an API, supports user logins and roles, and has to secure specific server-side routes. To deploy the app you’d need to do something like the following at a minimum:

Build the application and generate the bundles.
Build the APIs (depending upon what technology is used).
Setup a server that can host the SPA bundles and run the APIs.
If the static web app and APIs are on separate servers, configure CORS or a reverse proxy.
Configure SSL on the server.
Add a custom domain.
Configure a default fallback route so that the static web app’s client-side routes work properly and you don’t get a 404.
Deploy the SPA bundles to the server.
Deploy the API binaries or scripts up to the server.
Are there any additional considerations to take into account? Definitely! Here are a few additional ones:

Create a “staging” environment that mirrors the production environment so that you can do testing and QA before going to production.
Integrate user authentication and authorization from a cloud provider or 3rd party and secure application routes.
Automate the build process for the static web app and APIs and create a build pipeline.
Deploy the static web app to a CDN or to multiple servers around the world.
Deploy the app’s APIs to a cluster of servers if they need to handle variable loads.
More…
Whew….that is a lot of work! Isn’t it supposed to be easy to deploy a static web app and get it up and running? When you factor in the creation of a “staging” site, authentication/authorization, server configuration, dealing with server-side and client-side routes, global distribution of your app (if required), and other requirements your head can start to spin.

Are there any services out there that can help simplify the process of deploying a static web app and its associated APIs? You always do it yourself using various cloud provider services but you’d have to setup storage, web hosting, APIs, manage build and deployments, SSL certs, custom domains, handle security, and much more. You could also use services like Netlify (https://netlify.com), Firebase (https://firebase.google.com), and many others as well.

Fortunately, there’s a new kid/service on the block. Azure Static Web Apps. I already use Azure for all of my deployments so I’m really excited about this new functionality Microsoft is adding to Azure. Let’s look at how it works.

If you’d prefer to watch a video, here’s one I created that also goes through the steps discussed in this post.

Getting Started with Azure Static Web Apps


Introducing Azure Static Web Apps
Microsoft announced the Azure Static Web Apps service at their Build 2020 conference. I was fortunate to get early access and have been really impressed with the functionality they’re providing. Since then, they’ve made the service “GA” (generally available) and currently support 2 plans. The free plan allows you to get started absolutely free while the standard plan includes all of the free features as well as the ability to customize functionality such as authentication and APIs.


You can view pricing details for the standard plan at https://azure.microsoft.com/en-us/pricing/details/app-service/static.

Here are the basic steps to get started with Azure Static Web Apps:

Push your app code to Github.
Sign-in to the Azure Portal, search for “Static Web App”, and select the Create button.
Fill out the form, sign-in to Github, and select your repository and branch.
Define where your app, APIs, and build output are located.
Select the Create button and watch the magic happen!
View your static web app.
Before going through these steps you’ll need to have an Azure account. If you don’t have one you can setup a free trial account at https://azure.microsoft.com/free. Let’s walk through each of these steps.

Step 1. Push Your App Code to Github

If you’re already using Github to store your code then this first step is the easiest of all. If you’re new to Github check out how to started using it. Believe it or not, once your static web app is on Github and your app is ready to try out, the hard part is done!

If your app has APIs that you want to host in Azure then you can use Azure Functions (Node.js 12, .NET Core 3.1, or Python 3.8 are supported – check the docs for updates). You can use Azure Static Web Apps without any APIs at all of course. Maybe you have a truly static web app that doesn’t need to call out to a server for data. Or, if your app does have APIs and they’re hosted somewhere else that’s fine too. They’re flexible!

If your app does have APIs that you want to host in Azure and you’re new to Azure Functions, here’s a quick overview of what they are and what you can do with them. Azure Functions provide a “serverless” environment for hosting a variety of APIs that can serve data over HTTP or integrate with other Azure services. An Azure Function written with JavaScript consists of an index.js file that contains your code as well as a function.json file that defines the inputs and outputs for the function. Here’s an example of a function that is triggered by an HTTP request and returns JSON: function that is triggered by an HTTP request and returns JSON:

const customers = require('customers.json');

module.exports = async function (context, req) {
    context.res = {
        headers: {
          'Content-Type': 'application/json'    
        },
        body: customers
    };
}
The input and output bindings (the type of data that flows in and out of the function) can be defined in the function.json file. Here’s an example of input/output bindings for the previous function:

{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get"
      ],
      "route": "customers/"
    },
    {
      "type": "http",
      "direction": "out",
      "name": "res"
    }
  ]
}
